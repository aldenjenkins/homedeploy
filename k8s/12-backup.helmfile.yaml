environments:
  default:
    values:
      - values.yaml
    secrets:
      - secrets.yaml
releases:
- name: backup-volumes
  namespace: backup
  chart: incubator/raw
  values:
  - resources:
    - apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: backup-pv-vol
        labels:
          volume: backup-pv-vol
      spec:
        capacity:
          storage: {{ .Values.storage.capacity }}
        volumeMode: Filesystem
        accessModes:
        - ReadWriteMany
        persistentVolumeReclaimPolicy: Retain
        storageClassName: ""
        hostPath:
          path: {{ .Values.storage.mountpoint }}
          type: Directory
        nodeAffinity:
          required:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - {{ .Values.storage.nodename }}
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: backup-pv-claim
      spec:
        accessModes:
        - ReadWriteMany
        storageClassName: ""
        resources:
          requests:
            storage: {{ .Values.storage.capacity }}
        selector:
          matchLabels:
            volume: backup-pv-vol
- name: restic
  namespace: backup
  chart: incubator/raw
  values:
  - resources:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: rclone-configmap
      data:
        rclone.conf: |
          [gcs]
          type = google cloud storage
          project_number = {{ .Values.backup.gcs.project_number }}
          service_account_file = /secrets/gcssa.json
          location = eu
          storage_class = COLDLINE
    - apiVersion: v1
      kind: Secret
      metadata:
        name: restic-secrets
      type: Opaque
      data:
        gcssa.json: "{{ .Values.backup.gcs.sa }}"
        backup-password: "{{ .Values.backup.restic.password }}"
    - apiVersion: v1
      kind: Secret
      metadata:
        name: telegram-secrets
      type: Opaque
      stringData:
        token: "{{ .Values.backup.telegram.token }}"
        client: "{{ .Values.backup.telegram.client }}"
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: restic-job
      spec:
        schedule: "0 2 * * *"
        successfulJobsHistoryLimit: 1
        failedJobsHistoryLimit: 2
        jobTemplate:
          spec:
            template:
              spec:
                containers:
                - name: restic-backup
                  image: ubuntu:rolling
                  env:
                  - name: TELEGRAM_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: telegram-secrets
                        key: token
                  - name: TELEGRAM_CLIENT
                    valueFrom:
                      secretKeyRef:
                        name: telegram-secrets
                        key: client
                  args:
                  - /bin/bash
                  - -xu
                  - -c
                  - |
                    (
                        apt update && apt install -y rclone restic ca-certificates curl
                        curl -s https://raw.githubusercontent.com/fabianonline/telegram.sh/master/telegram > /usr/local/bin/telegram
                        chmod +x /usr/local/bin/telegram
                    ) 2>&1 | tee /tmp/setup.log

                    run_restic () {
                        NAME=${1}; shift
                        BUCKET=${1}; shift
                        TARGET=${1}; shift
                        EXTRA=${@}
                        telegram -t "${TELEGRAM_TOKEN}" -c "${TELEGRAM_CLIENT}" "${NAME}: backup started"
                        restic \
                            --cache-dir /media/storage/.backup-cache/${NAME} \
                            --password-file /secrets/backup-password \
                            --repo rclone:${BUCKET} \
                            --verbose \
                            backup ${TARGET} \
                            ${EXTRA} \
                            | tee /tmp/execution.txt

                        if [ 0 -eq ${PIPESTATUS[0]} ]
                        then
                            export STATUS="success"
                        else
                            export STATUS="failure"
                        fi
                        telegram -t "${TELEGRAM_TOKEN}" -c "${TELEGRAM_CLIENT}" -f /tmp/execution.txt "${NAME}: backup ${STATUS}"
                    }

                    run_restic primary "{{ .Values.backup.restic.primary.bucket }}" "{{ .Values.backup.restic.primary.path }}"
                    run_restic dot-config "{{ .Values.backup.restic.dotconfig.bucket }}" "{{ .Values.backup.restic.dotconfig.path }}" --exclude 'Plex Media Server'

                  volumeMounts:
                  - name: rclone-config
                    mountPath: /root/.config/rclone
                  - name: secrets
                    mountPath: /secrets
                  - name: storage
                    mountPath: /media/storage
                nodeSelector:
                  storagetype: attached
                restartPolicy: OnFailure
                volumes:
                - name: rclone-config
                  configMap:
                    name: rclone-configmap
                - name: secrets
                  secret:
                    secretName: restic-secrets
                - name: storage
                  persistentVolumeClaim:
                    claimName: backup-pv-claim
